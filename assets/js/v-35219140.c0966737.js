"use strict";(self.webpackChunkinterview_weiyie=self.webpackChunkinterview_weiyie||[]).push([[914],{5255:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-35219140",path:"/pages/3d52574260725aea/",title:"「布局技巧」图片未加载前自动撑开元素高度",lang:"zh-CN",frontmatter:{title:"「布局技巧」图片未加载前自动撑开元素高度",date:"2020-02-22T16:37:10.000Z",permalink:"/pages/3d52574260725aea",categories:["页面","CSS"],tags:[null],author:{name:"weiyie",link:"https://github.com/weiyie"}},excerpt:'<h1 id="「布局技巧」图片未加载前自动撑开元素高度" tabindex="-1"><a class="header-anchor" href="#「布局技巧」图片未加载前自动撑开元素高度" aria-hidden="true">#</a> 「布局技巧」图片未加载前自动撑开元素高度</h1>\n<p>在移动端开发中，有一些元素是根据图片高度来自动撑开的 ，高度不能写死（如轮播图的外层元素）。在网络较慢的情况下，图片加载需要一些时间，此时该元素的高度没有被撑开，在网页布局上会有一些不想看到的效果。</p>\n',headers:[],filePathRelative:"02.页面/20.CSS/20.「布局技巧」图片未加载前自动撑开元素高度.md",git:{updatedTime:1634741038e3,contributors:[{name:"wb-wzc589583",email:"wb-wzc589583@alibaba-inc.com",commits:1}]}}},9684:(n,s,e)=>{e.r(s),e.d(s,{default:()=>u});var a=e(6252);const p=(0,a.uE)('<h1 id="「布局技巧」图片未加载前自动撑开元素高度" tabindex="-1"><a class="header-anchor" href="#「布局技巧」图片未加载前自动撑开元素高度" aria-hidden="true">#</a> 「布局技巧」图片未加载前自动撑开元素高度</h1><p>在移动端开发中，有一些元素是根据图片高度来自动撑开的 ，高度不能写死（如轮播图的外层元素）。在网络较慢的情况下，图片加载需要一些时间，此时该元素的高度没有被撑开，在网页布局上会有一些不想看到的效果。</p><p>这种情况我们可以设置如下样式来设置该元素的高度：</p><div class="language-stylus ext-styl line-numbers-mode"><pre class="language-stylus"><code><span class="token selector">.wrapper</span>\n  <span class="token property-declaration"><span class="token property">overflow</span> hidden</span>\n  <span class="token property-declaration"><span class="token property">width</span> <span class="token number">100</span><span class="token unit">%</span></span>\n  <span class="token property-declaration"><span class="token property">height</span> <span class="token number">0</span></span>\n  <span class="token property-declaration"><span class="token property">padding-bottom</span> <span class="token number">26.66</span><span class="token unit">%</span> <span class="token comment">// 这个数值是图片的高宽比，即 高/宽</span></span>\n  <span class="token property-declaration"><span class="token property">background</span> <span class="token hexcode">#eee</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码中，<code>padding-bottom</code> 的取值是图片的高宽比（即，高/宽），它会根据 <code>width</code>值的<code>26.66%</code>计算，最终元素的高度会和图片加载完成后的高度一致。</p><p>也可以使用<code>vw</code>的方法，但在一些浏览器可能有兼容性问题：</p><div class="language-stylus ext-styl line-numbers-mode"><pre class="language-stylus"><code><span class="token selector">.wrapper</span>\n  <span class="token property-declaration"><span class="token property">width</span> <span class="token number">100</span><span class="token unit">%</span></span>\n  <span class="token property-declaration"><span class="token property">height</span> <span class="token number">26.66</span><span class="token unit">vw</span></span>\n  <span class="token property-declaration"><span class="token property">background</span> <span class="token hexcode">#eee</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',7),t=(0,a._)("p",null,[(0,a._)("code",null,"vw"),(0,a.Uk)("，viewpoint width，视窗宽度，1vw=视窗宽度的1%")],-1),r=(0,a._)("p",null,[(0,a._)("code",null,"vh"),(0,a.Uk)("，viewpoint height，视窗高度，1vh=视窗高度的1%")],-1),l=(0,a.Uk)("更多 "),o={href:"https://www.runoob.com/cssref/css-units.html",target:"_blank",rel:"noopener noreferrer"},c=(0,a.Uk)("CSS单位"),i=(0,a.Uk)("。"),d={},u=(0,e(3744).Z)(d,[["render",function(n,s){const e=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[p,(0,a._)("blockquote",null,[t,r,(0,a._)("p",null,[l,(0,a._)("a",o,[c,(0,a.Wm)(e)]),i])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}}}]);